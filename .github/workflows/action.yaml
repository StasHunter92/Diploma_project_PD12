name: Build_deploy
on: [ push ]
jobs:
  code_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          exclude: |
            "./core/migrations/"
            "./goals/migrations/"
            "./bot/migrations/"
          max-line-length: "120"
          ignore: F401,F541,E121

  build_push:
    runs-on: ubuntu-latest
    needs: code_check
    steps:
      - name: Clone code
        uses: actions/checkout@v2

      - name: Docker build
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: docker build -t stashunter/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID} .

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker push
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: docker push stashunter/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}

  deploy:
    runs-on: ubuntu-latest
    needs: build_push
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      VK_OAUTH2_KEY: ${{ secrets.VK_OAUTH2_KEY }}
      VK_OAUTH2_SECRET: ${{ secrets.VK_OAUTH2_SECRET }}
      TG_TOKEN: ${{ secrets.TG_TOKEN}}
    steps:
      - name: Clone code
        uses: actions/checkout@v2

      - name: Render configs
        run: |
          mkdir todolist
          cat docker-compose-ci.yaml | envsubst > todolist/docker-compose.yaml
          cat .env.deploy | envsubst > todolist/.env
          cat nginx.conf > todolist/nginx.conf

      - name: Copy compose file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          source: "todolist/docker-compose.yaml"
          target: "diploma_project"
          strip_components: 1

      - name: Copy env file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          source: "todolist/.env"
          target: "diploma_project"
          strip_components: 1

      - name: Copy nginx file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          source: "todolist/nginx.conf"
          target: "diploma_project"
          strip_components: 1

      - name: Delete temporary directory
        run: |
          rm -rf todolist

  run_server:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          script: |
            cd diploma_project
            echo ${{ secrets.HOST_PASSWORD }} | sudo -S sh -c "docker-compose pull && docker-compose up -d"

#      - name: Cleanup docker
#        if: always()
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.HOST_USERNAME }}
#          password: ${{ secrets.HOST_PASSWORD }}
#          script: |
#            echo ${{ secrets.HOST_PASSWORD }} | sudo -S docker system prune -a -f